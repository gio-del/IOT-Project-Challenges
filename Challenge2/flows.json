[
    {
        "id": "73b729f3a8b7a19f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2677cef6a12b3a65",
        "type": "debug",
        "z": "73b729f3a8b7a19f",
        "name": "FILTER_OUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 320,
        "wires": []
    },
    {
        "id": "2c91e70e9d444d7c",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "FLOW_INIT",
        "func": "global.set(\"fileGlobal\",msg.payload);\nglobal.set(\"messageCounter\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 460,
        "wires": [
            [
                "f77c1f5f4535b01b"
            ]
        ]
    },
    {
        "id": "68f2363bed00c9af",
        "type": "file in",
        "z": "73b729f3a8b7a19f",
        "name": "input_CSV",
        "filename": "/home/gio-del/Desktop/Projects/IOT-Project-Challenges/Challenge2/challenge2023_2.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 540,
        "wires": [
            [
                "3cae19986665f892"
            ]
        ]
    },
    {
        "id": "7192326547f7e231",
        "type": "mqtt in",
        "z": "73b729f3a8b7a19f",
        "name": "code_generator",
        "topic": "polimi/challenge_2/2023/id_code_generator",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "72f6a801ba85e77a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "d41fc0850776ba8e"
            ]
        ]
    },
    {
        "id": "aad7a7b43f2e12d2",
        "type": "inject",
        "z": "73b729f3a8b7a19f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "68f2363bed00c9af"
            ]
        ]
    },
    {
        "id": "71f296c51d2bc42d",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "FILTER",
        "func": "const file = global.get(\"fileGlobal\");\nconst counter = global.get(\"messageCounter\");\n\nif(counter > 99) {\n    msg.payload = \"FINISHED\";\n    return msg; //if counter is greater than 99 ignore\n} \n\nif(!file) {\n    msg.payload = \"NOTREADY\";\n    return msg;\n}\n\nif(msg.payload.id) { // so that wrong formatted code are not considered\n\n    global.set(\"messageCounter\",counter+1); // increment global counter\n\n    const lastDigit = 658;\n    const id = msg.payload.id;\n\n    const frameNumber = (lastDigit + parseInt(id)) % 7711;\n    console.log(lastDigit, id, frameNumber);\n    if(frameNumber!=0) {\n        msg.payload = file[frameNumber-1];\n        msg.payload.previousID = id;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "2677cef6a12b3a65",
                "dc9a4fb13a0e463d"
            ]
        ]
    },
    {
        "id": "f77c1f5f4535b01b",
        "type": "debug",
        "z": "73b729f3a8b7a19f",
        "name": "input_file_debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 460,
        "wires": []
    },
    {
        "id": "3cae19986665f892",
        "type": "csv",
        "z": "73b729f3a8b7a19f",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 460,
        "wires": [
            [
                "2c91e70e9d444d7c"
            ]
        ]
    },
    {
        "id": "dc9a4fb13a0e463d",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "PARSER",
        "func": "if (msg.payload != \"NOTREADY\" && msg.payload != \"FINISHED\") {\n    //todo: should parse the msg payload and return couples publish, payload\n\n    const messages = msg.payload[\"Info\"]; // messages\n    let payloads = msg.payload[\"Message\"]; // payloads\n\n    const publishMessages = messages.split(\",\").filter(str => str.startsWith(\"Publish Message\"))\n\n    let emptyPublishPayloads = publishMessages.length;\n\n    const previousID = msg.payload.previousID;\n\n    if(payloads) {\n        // check for malformed packets\n        const lastClosedBrackets = payloads.lastIndexOf(\"}\");\n        const lastOpenBrackets = payloads.lastIndexOf(\"{\");\n        let malformed = \"\";\n\n        if (lastClosedBrackets < lastOpenBrackets) {\n            malformed = payloads.slice(lastOpenBrackets, payloads.length);\n            payloads = payloads.slice(0,lastOpenBrackets-1);\n        }\n\n        const parsedPayloads = JSON.parse('[' + payloads +']');\n        emptyPublishPayloads -= parsedPayloads.length;\n        parsedPayloads.forEach(payload => {\n            msg.payload = {\n                \"timestamp\": Date.now().toString(), \"id\": previousID, \"payload\": JSON.stringify(payload)\n                };\n            node.send(msg);\n        })\n        if(malformed.length > 0) {\n            emptyPublishPayloads -= 1; // it does count as a non-empty payload\n            msg.payload = {\"timestamp\": Date.now().toString(), \"id\": previousID, \"payload\": malformed};\n            node.send(msg);\n        }\n    }\n\n    for(let i=0;i<emptyPublishPayloads;i++) {\n        msg.payload = {\n            \"timestamp\": Date.now().toString(), \"id\": previousID, \"payload\": \"\"\n        };\n        node.send(msg);\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "8b0dfed0330f1b46",
                "040d565b9e17ed35"
            ]
        ]
    },
    {
        "id": "040d565b9e17ed35",
        "type": "mqtt out",
        "z": "73b729f3a8b7a19f",
        "name": "publish",
        "topic": "/polimi/iot2023/challenge2/10700658",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "72f6a801ba85e77a",
        "x": 1160,
        "y": 40,
        "wires": []
    },
    {
        "id": "8b0dfed0330f1b46",
        "type": "debug",
        "z": "73b729f3a8b7a19f",
        "name": "PARSER_OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 240,
        "wires": []
    },
    {
        "id": "d41fc0850776ba8e",
        "type": "debug",
        "z": "73b729f3a8b7a19f",
        "name": "debug_code_generator",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 320,
        "wires": []
    },
    {
        "id": "6e358946da84bb0d",
        "type": "mqtt in",
        "z": "73b729f3a8b7a19f",
        "name": "subscription",
        "topic": "/polimi/iot2023/challenge2/10700658",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "72f6a801ba85e77a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1f552e4d1c9b7fd0",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "tempcelsius_filter",
        "func": "\ntry {\n    const payload = JSON.parse(msg.payload.payload);\n\n    if (payload.type === \"temperature\" && payload.unit === \"C\") {\n       msg.payload = payload;\n       return msg;\n    }\n} catch {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "34b9733fc3dbc115",
                "6017b346ebd83c0f"
            ]
        ]
    },
    {
        "id": "6017b346ebd83c0f",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "WRITER",
        "func": "msg.payload = \"\\\"\" + JSON.stringify(msg.payload).replaceAll(\"\\\"\",\"\\\"\\\"\") + \"\\\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 600,
        "wires": [
            [
                "efd3cf16fc8e921f"
            ]
        ]
    },
    {
        "id": "efd3cf16fc8e921f",
        "type": "file",
        "z": "73b729f3a8b7a19f",
        "name": "csv_output_write",
        "filename": "/home/gio-del/Desktop/Projects/IOT-Project-Challenges/Challenge2/10700658_10618906.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1130,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "34b9733fc3dbc115",
        "type": "function",
        "z": "73b729f3a8b7a19f",
        "name": "PLOTTER",
        "func": "msg.payload = msg.payload.range[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 760,
        "wires": [
            [
                "a3131cc55947bd52"
            ]
        ]
    },
    {
        "id": "a3131cc55947bd52",
        "type": "ui_chart",
        "z": "73b729f3a8b7a19f",
        "name": "chart",
        "group": "ed654e8fe89770c3",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1090,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e517d4082cd9fcd8",
        "type": "inject",
        "z": "73b729f3a8b7a19f",
        "name": "reset_chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 890,
        "y": 700,
        "wires": [
            [
                "a3131cc55947bd52"
            ]
        ]
    },
    {
        "id": "72f6a801ba85e77a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ed654e8fe89770c3",
        "type": "ui_group",
        "name": "Default",
        "tab": "0df9a89405d1f889",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0df9a89405d1f889",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]