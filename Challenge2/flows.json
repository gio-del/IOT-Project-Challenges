[
    {
        "id": "35a9873add9fb86f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "85bb50166a58a587",
        "type": "debug",
        "z": "35a9873add9fb86f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 320,
        "wires": []
    },
    {
        "id": "0b1a4e1dbed6219d",
        "type": "function",
        "z": "35a9873add9fb86f",
        "name": "function 1",
        "func": "global.set(\"fileGlobal\",msg.payload);\nglobal.set(\"messageCounter\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "de26dc36a4d79007"
            ]
        ]
    },
    {
        "id": "906ab85068caa990",
        "type": "file in",
        "z": "35a9873add9fb86f",
        "name": "",
        "filename": "/home/gio-del/Desktop/Projects/IOT-Project-Challenges/Challenge2/challenge2023_2.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 650,
        "y": 680,
        "wires": [
            [
                "47663c5f08a48c60"
            ]
        ]
    },
    {
        "id": "d9e6dab7d9d294fb",
        "type": "mqtt in",
        "z": "35a9873add9fb86f",
        "name": "",
        "topic": "polimi/challenge_2/2023/id_code_generator",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "72f6a801ba85e77a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "7df04cee6382e03e"
            ]
        ]
    },
    {
        "id": "d1d6ebaee0c24873",
        "type": "inject",
        "z": "35a9873add9fb86f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 520,
        "wires": [
            [
                "906ab85068caa990"
            ]
        ]
    },
    {
        "id": "7df04cee6382e03e",
        "type": "function",
        "z": "35a9873add9fb86f",
        "name": "function 2",
        "func": "const file = global.get(\"fileGlobal\");\nconst counter = global.get(\"messageCounter\");\n\nif(counter > 99){\n    msg.payload = \"FINISHED\";\n    return msg; //if counter is greater than 99 ignore\n} \n\nif(!file) {\n    msg.payload = \"NOTREADY\";\n    return msg;\n}\n\nglobal.set(\"messageCounter\",counter+1); // increment global counter\n\nconst lastDigit = 658;\nconst id = msg.payload.id;\n\nconst frameNumber = (lastDigit + id) % 7711;\n\nmsg.payload = file[frameNumber];\nmsg.payload.previousID = id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 220,
        "wires": [
            [
                "85bb50166a58a587",
                "fed456579450fb68"
            ]
        ]
    },
    {
        "id": "de26dc36a4d79007",
        "type": "debug",
        "z": "35a9873add9fb86f",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 480,
        "wires": []
    },
    {
        "id": "47663c5f08a48c60",
        "type": "csv",
        "z": "35a9873add9fb86f",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 480,
        "wires": [
            [
                "0b1a4e1dbed6219d"
            ]
        ]
    },
    {
        "id": "fed456579450fb68",
        "type": "function",
        "z": "35a9873add9fb86f",
        "name": "parser",
        "func": "if (msg.payload != \"NOTREADY\" && msg.payload != \"FINISHED\") {\n    //todo: should parse the msg payload and return couples publish, payload\n\n    const messages = msg.payload.col9; // messages\n       const payloads = msg.payload.col10; // payloads\n\n    const publishMessages = messages.split(\",\").filter(str => str.startsWith(\"Publish Message\"))\n\n    let emptyPublishPayloads = publishMessages.length;\n\n    \n    if(payloads) {\n        const parsedPayloads = JSON.parse('[' + payloads +']');\n        emptyPublishPayloads -= parsedPayloads.length;\n        parsedPayloads.forEach(payload => {\n            msg.payload = {\n                \"timestamp\": new Date().getTime(), \"id\": msg.payload.previousID, \"payload\": payload\n                };\n            msg.topic = \"/polimi/iot2023/challenge2/10700658\";\n            node.send(msg);\n        })\n    }\n\n    for(let i=0;i<emptyPublishPayloads;i++) {\n        msg.payload = \"\";\n        msg.topic = \"/polimi/iot2023/challenge2/10700658\";\n        node.send(msg);\n    }\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 120,
        "wires": [
            [
                "1daf3b4ddd6af424",
                "7fdb69f26c4ef849"
            ]
        ]
    },
    {
        "id": "7fdb69f26c4ef849",
        "type": "mqtt out",
        "z": "35a9873add9fb86f",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "72f6a801ba85e77a",
        "x": 1250,
        "y": 120,
        "wires": []
    },
    {
        "id": "1daf3b4ddd6af424",
        "type": "debug",
        "z": "35a9873add9fb86f",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "72f6a801ba85e77a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]