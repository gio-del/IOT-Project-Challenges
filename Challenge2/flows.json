[
    {
        "id": "a3e002961d9d4b05",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c23e27a8143fe84e",
        "type": "debug",
        "z": "a3e002961d9d4b05",
        "name": "FILTER_OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "8f8f25491e57d509",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "init",
        "func": "global.set(\"fileGlobal\",msg.payload);\nglobal.set(\"messageCounter\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 420,
        "wires": [
            [
                "907bad9f27e4af8d"
            ]
        ]
    },
    {
        "id": "a883362d8a8f41c6",
        "type": "file in",
        "z": "a3e002961d9d4b05",
        "name": "input_CSV",
        "filename": "/home/gio-del/Desktop/Projects/IOT-Project-Challenges/Challenge2/challenge2023_2.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 570,
        "y": 500,
        "wires": [
            [
                "7c23ec5eb62a1890"
            ]
        ]
    },
    {
        "id": "ff2bd235c0e8e23e",
        "type": "mqtt in",
        "z": "a3e002961d9d4b05",
        "name": "code_generator",
        "topic": "polimi/challenge_2/2023/id_code_generator",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "72f6a801ba85e77a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "b81f0051696e98d5",
                "d37376563e132832"
            ]
        ]
    },
    {
        "id": "700f2de3fec0702f",
        "type": "inject",
        "z": "a3e002961d9d4b05",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 460,
        "wires": [
            [
                "a883362d8a8f41c6"
            ]
        ]
    },
    {
        "id": "b81f0051696e98d5",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "filter",
        "func": "const file = global.get(\"fileGlobal\");\nconst counter = global.get(\"messageCounter\");\n\nif(counter > 99){\n    msg.payload = \"FINISHED\";\n    return msg; //if counter is greater than 99 ignore\n} \n\nif(!file) {\n    msg.payload = \"NOTREADY\";\n    return msg;\n}\n\nglobal.set(\"messageCounter\",counter+1); // increment global counter\n\nconst lastDigit = 658;\nconst id = msg.payload.id;\n\nconst frameNumber = (lastDigit + parseInt(id)) % 7711;\nconsole.log(lastDigit, id, frameNumber);\nmsg.payload = file[frameNumber];\nmsg.payload.previousID = id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            [
                "c23e27a8143fe84e",
                "643a4b040400c541"
            ]
        ]
    },
    {
        "id": "907bad9f27e4af8d",
        "type": "debug",
        "z": "a3e002961d9d4b05",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 420,
        "wires": []
    },
    {
        "id": "7c23ec5eb62a1890",
        "type": "csv",
        "z": "a3e002961d9d4b05",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 790,
        "y": 420,
        "wires": [
            [
                "8f8f25491e57d509"
            ]
        ]
    },
    {
        "id": "643a4b040400c541",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "parser",
        "func": "if (msg.payload != \"NOTREADY\" && msg.payload != \"FINISHED\") {\n    //todo: should parse the msg payload and return couples publish, payload\n\n    const messages = msg.payload.col9; // messages\n    const payloads = msg.payload.col10; // payloads\n\n    const publishMessages = messages.split(\",\").filter(str => str.startsWith(\"Publish Message\"))\n\n    let emptyPublishPayloads = publishMessages.length;\n\n    const previousID = msg.payload.previousID;\n\n    const topic = \"/polimi/iot2023/challenge2/10700658\";\n\n    if(payloads) {\n        const parsedPayloads = JSON.parse('[' + payloads +']');\n        emptyPublishPayloads -= parsedPayloads.length;\n        parsedPayloads.forEach(payload => {\n            msg.payload = {\n                \"timestamp\": new Date().toISOString(), \"id\": previousID, \"payload\": payload\n                };\n            msg.topic = topic;\n            node.send(msg);\n        })\n    }\n\n    for(let i=0;i<emptyPublishPayloads;i++) {\n        msg.payload = {\n            \"timestamp\": new Date().toISOString(), \"id\": previousID, \"payload\": \"\"\n        };\n        msg.topic = topic;\n        node.send(msg);\n    }\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 100,
        "wires": [
            [
                "e09299f48db1a785",
                "3f3577ca931d0e99"
            ]
        ]
    },
    {
        "id": "3f3577ca931d0e99",
        "type": "mqtt out",
        "z": "a3e002961d9d4b05",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "72f6a801ba85e77a",
        "x": 1110,
        "y": 20,
        "wires": []
    },
    {
        "id": "e09299f48db1a785",
        "type": "debug",
        "z": "a3e002961d9d4b05",
        "name": "PARSER_OUT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "d37376563e132832",
        "type": "debug",
        "z": "a3e002961d9d4b05",
        "name": "debug_code_generator",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "4d4a19e6abba7f44",
        "type": "mqtt in",
        "z": "a3e002961d9d4b05",
        "name": "subscription",
        "topic": "/polimi/iot2023/challenge2/10700658",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "72f6a801ba85e77a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 620,
        "wires": [
            [
                "e8f2e6eb2aaac691"
            ]
        ]
    },
    {
        "id": "e8f2e6eb2aaac691",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "tempcelsius_filter",
        "func": "const payload = msg.payload.payload;\n\nif (payload.type === \"temperature\" && payload.unit === \"C\") {\n    msg.payload = payload;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "82d9287c17a2e585",
                "411d66710e1c2dff"
            ]
        ]
    },
    {
        "id": "82d9287c17a2e585",
        "type": "debug",
        "z": "a3e002961d9d4b05",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "f92ee5ad9abe6a96",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "writer",
        "func": "//TODO: this should pick the msg and save each message in a file (GLOBAL)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 620,
        "wires": [
            [
                "3e3c0daf6e453a2f"
            ]
        ]
    },
    {
        "id": "3e3c0daf6e453a2f",
        "type": "file",
        "z": "a3e002961d9d4b05",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1040,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "411d66710e1c2dff",
        "type": "function",
        "z": "a3e002961d9d4b05",
        "name": "plotter",
        "func": "msg.payload = msg.payload.range[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 700,
        "wires": [
            [
                "3637e47b78c40821"
            ]
        ]
    },
    {
        "id": "3637e47b78c40821",
        "type": "ui_chart",
        "z": "a3e002961d9d4b05",
        "name": "chart",
        "group": "ed654e8fe89770c3",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1230,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "72f6a801ba85e77a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ed654e8fe89770c3",
        "type": "ui_group",
        "name": "Default",
        "tab": "0df9a89405d1f889",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0df9a89405d1f889",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]